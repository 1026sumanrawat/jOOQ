/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.derby.sys.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.meta.derby.sys.Sys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sysschemas extends TableImpl<Record> {

    private static final long serialVersionUID = 578657045;

    /**
     * The reference instance of <code>SYS.SYSSCHEMAS</code>
     */
    public static final Sysschemas SYSSCHEMAS = new Sysschemas();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>SYS.SYSSCHEMAS.SCHEMAID</code>.
     */
    public final TableField<Record, String> SCHEMAID = createField(DSL.name("SCHEMAID"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>SYS.SYSSCHEMAS.SCHEMANAME</code>.
     */
    public final TableField<Record, String> SCHEMANAME = createField(DSL.name("SCHEMANAME"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>SYS.SYSSCHEMAS.AUTHORIZATIONID</code>.
     */
    public final TableField<Record, String> AUTHORIZATIONID = createField(DSL.name("AUTHORIZATIONID"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    private Sysschemas(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Sysschemas(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>SYS.SYSSCHEMAS</code> table reference
     */
    public Sysschemas(String alias) {
        this(DSL.name(alias), SYSSCHEMAS);
    }

    /**
     * Create an aliased <code>SYS.SYSSCHEMAS</code> table reference
     */
    public Sysschemas(Name alias) {
        this(alias, SYSSCHEMAS);
    }

    /**
     * Create a <code>SYS.SYSSCHEMAS</code> table reference
     */
    public Sysschemas() {
        this(DSL.name("SYSSCHEMAS"), null);
    }

    public <O extends Record> Sysschemas(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SYSSCHEMAS);
    }

    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    @Override
    public Sysschemas as(String alias) {
        return new Sysschemas(DSL.name(alias), this);
    }

    @Override
    public Sysschemas as(Name alias) {
        return new Sysschemas(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sysschemas rename(String name) {
        return new Sysschemas(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sysschemas rename(Name name) {
        return new Sysschemas(name, null);
    }
}
