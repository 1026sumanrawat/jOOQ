/*
 * This file is generated by jOOQ.
*/
package org.jooq.examples.skala.h2


import javax.annotation.Generated

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.examples.skala.h2.tables.TAuthor
import org.jooq.examples.skala.h2.tables.TBook
import org.jooq.examples.skala.h2.tables.records.TAuthorRecord
import org.jooq.examples.skala.h2.tables.records.TBookRecord
import org.jooq.impl.AbstractKeys

import scala.Array


/**
 * A class modelling foreign key relationships and constraints of tables of
 * the <code>PUBLIC</code> schema.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.0"
  ),
  comments = "This class is generated by jOOQ"
)
object Keys {

  // -------------------------------------------------------------------------
  // IDENTITY definitions
  // -------------------------------------------------------------------------


  // -------------------------------------------------------------------------
  // UNIQUE and PRIMARY KEY definitions
  // -------------------------------------------------------------------------

  val PK_T_AUTHOR = UniqueKeys0.PK_T_AUTHOR
  val PK_T_BOOK = UniqueKeys0.PK_T_BOOK

  // -------------------------------------------------------------------------
  // FOREIGN KEY definitions
  // -------------------------------------------------------------------------

  val FK_T_BOOK_AUTHOR_ID = ForeignKeys0.FK_T_BOOK_AUTHOR_ID
  val FK_T_BOOK_CO_AUTHOR_ID = ForeignKeys0.FK_T_BOOK_CO_AUTHOR_ID

  // -------------------------------------------------------------------------
  // [#1459] distribute members to avoid static initialisers > 64kb
  // -------------------------------------------------------------------------

  private object UniqueKeys0 extends AbstractKeys {
    val PK_T_AUTHOR : UniqueKey[TAuthorRecord] = AbstractKeys.createUniqueKey(TAuthor.T_AUTHOR, "PK_T_AUTHOR", TAuthor.T_AUTHOR.ID)
    val PK_T_BOOK : UniqueKey[TBookRecord] = AbstractKeys.createUniqueKey(TBook.T_BOOK, "PK_T_BOOK", TBook.T_BOOK.ID)
  }

  private object ForeignKeys0 extends AbstractKeys {
    val FK_T_BOOK_AUTHOR_ID : ForeignKey[TBookRecord, TAuthorRecord] = AbstractKeys.createForeignKey(org.jooq.examples.skala.h2.Keys.PK_T_AUTHOR, TBook.T_BOOK, "FK_T_BOOK_AUTHOR_ID", TBook.T_BOOK.AUTHOR_ID)
    val FK_T_BOOK_CO_AUTHOR_ID : ForeignKey[TBookRecord, TAuthorRecord] = AbstractKeys.createForeignKey(org.jooq.examples.skala.h2.Keys.PK_T_AUTHOR, TBook.T_BOOK, "FK_T_BOOK_CO_AUTHOR_ID", TBook.T_BOOK.CO_AUTHOR_ID)
  }
}
